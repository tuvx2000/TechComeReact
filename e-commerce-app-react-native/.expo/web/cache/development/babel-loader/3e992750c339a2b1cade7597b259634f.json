{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL } from \"../../utils/Config\";\nimport { timeoutPromise } from \"../../utils/Tools\";\nexport var ORDER_LOADING = \"ORDER_LOADING\";\nexport var ORDER_FAILURE = \"ORDER_FAILURE\";\nexport var FETCH_ORDER = \"FETCH_ORDER\";\nexport var ADD_ORDER = \"ADD_ORDER\";\nexport var ERROR = \"ERROR\";\nexport var fetchOrder = function fetchOrder() {\n  return function _callee(dispatch, getState) {\n    var user, response, resData, filterUserOrder;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: ORDER_LOADING\n            });\n            user = getState().auth.user;\n\n            if (!(user.userid == undefined)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/order\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"GET\"\n            })));\n\n          case 7:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            dispatch({\n              type: ORDER_FAILURE\n            });\n            throw new Error(\"Something went wrong! Can't get your order\");\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            filterUserOrder = resData.content.filter(function (userOrder) {\n              return userOrder.userId._id === user.userid;\n            });\n            dispatch({\n              type: FETCH_ORDER,\n              orderData: filterUserOrder\n            });\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](4);\n            throw _context.t0;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 18]], Promise);\n  };\n};\nexport var addOrder = function addOrder(token, orderItems, name, totalAmount, paymentMethod, fullAddress, phone) {\n  return function _callee2(dispatch, getState) {\n    var user, response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: ORDER_LOADING\n            });\n            user = getState().auth.user;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/order/post\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                token: token,\n                orderInfo: {\n                  userId: user.userid,\n                  items: orderItems,\n                  name: name,\n                  totalAmount: totalAmount,\n                  paymentMethod: paymentMethod,\n                  address: fullAddress,\n                  phone: phone\n                }\n              })\n            })));\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: ORDER_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resData = _context2.sent;\n            dispatch({\n              type: ADD_ORDER,\n              orderItem: resData.content\n            });\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](2);\n            throw error;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 15]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/reducers/order/orderActions.js"],"names":["API_URL","timeoutPromise","ORDER_LOADING","ORDER_FAILURE","FETCH_ORDER","ADD_ORDER","ERROR","fetchOrder","dispatch","getState","type","user","auth","userid","undefined","fetch","headers","Accept","token","method","response","ok","Error","json","resData","filterUserOrder","content","filter","userOrder","userId","_id","orderData","addOrder","orderItems","name","totalAmount","paymentMethod","fullAddress","phone","body","JSON","stringify","orderInfo","items","address","orderItem","error"],"mappings":"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","sourcesContent":["import { API_URL } from \"../../utils/Config\";\r\nimport { timeoutPromise } from \"../../utils/Tools\";\r\nexport const ORDER_LOADING = \"ORDER_LOADING\";\r\nexport const ORDER_FAILURE = \"ORDER_FAILURE\";\r\nexport const FETCH_ORDER = \"FETCH_ORDER\";\r\nexport const ADD_ORDER = \"ADD_ORDER\";\r\nexport const ERROR = \"ERROR\";\r\n\r\n//Fetch order\r\nexport const fetchOrder = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: ORDER_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    if (user.userid == undefined) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/order`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"GET\",\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: ORDER_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong! Can't get your order\");\r\n      }\r\n      const resData = await response.json();\r\n      const filterUserOrder = resData.content.filter(\r\n        (userOrder) => userOrder.userId._id === user.userid\r\n      );\r\n      dispatch({\r\n        type: FETCH_ORDER,\r\n        orderData: filterUserOrder,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\n//Add order\r\nexport const addOrder = (\r\n  token,\r\n  orderItems,\r\n  name,\r\n  totalAmount,\r\n  paymentMethod,\r\n  fullAddress,\r\n  phone\r\n) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: ORDER_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/order/post`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            token,\r\n            orderInfo: {\r\n              userId: user.userid,\r\n              items: orderItems,\r\n              name,\r\n              totalAmount,\r\n              paymentMethod,\r\n              address: fullAddress,\r\n              phone,\r\n            },\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: ORDER_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const resData = await response.json();\r\n      dispatch({\r\n        type: ADD_ORDER,\r\n        orderItem: resData.content,\r\n      });\r\n    } catch (err) {\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}