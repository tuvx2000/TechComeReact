{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport valid from \"card-validator\";\nimport { removeNonNumber, removeLeadingSpaces } from \"./Utilities\";\nimport pick from \"lodash.pick\";\n\nvar limitLength = function limitLength() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var maxLength = arguments.length > 1 ? arguments[1] : undefined;\n  return string.substr(0, maxLength);\n};\n\nvar addGaps = function addGaps() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var gaps = arguments.length > 1 ? arguments[1] : undefined;\n  var offsets = [0].concat(gaps).concat([string.length]);\n  return offsets.map(function (end, index) {\n    if (index === 0) return \"\";\n    var start = offsets[index - 1];\n    return string.substr(start, end - start);\n  }).filter(function (part) {\n    return part !== \"\";\n  }).join(\" \");\n};\n\nvar FALLBACK_CARD = {\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    size: 3\n  }\n};\n\nvar CCFieldFormatter = function CCFieldFormatter(displayedFields) {\n  var _this = this;\n\n  _classCallCheck(this, CCFieldFormatter);\n\n  this.formatValues = function (values) {\n    var card = valid.number(values.number).card || FALLBACK_CARD;\n    return pick({\n      type: card.type,\n      number: _this._formatNumber(values.number, card),\n      expiry: _this._formatExpiry(values.expiry),\n      cvc: _this._formatCVC(values.cvc, card),\n      name: removeLeadingSpaces(values.name),\n      postalCode: (values.postalCode || '').trim()\n    }, _this._displayedFields);\n  };\n\n  this._formatNumber = function (number, card) {\n    var numberSanitized = removeNonNumber(number);\n    var maxLength = card.lengths[card.lengths.length - 1];\n    var lengthSanitized = limitLength(numberSanitized, maxLength);\n    var formatted = addGaps(lengthSanitized, card.gaps);\n    return formatted;\n  };\n\n  this._formatExpiry = function (expiry) {\n    var sanitized = limitLength(removeNonNumber(expiry), 4);\n\n    if (sanitized.match(/^[2-9]$/)) {\n      return \"0\" + sanitized;\n    }\n\n    if (sanitized.length > 2) {\n      return sanitized.substr(0, 2) + \"/\" + sanitized.substr(2, sanitized.length);\n    }\n\n    return sanitized;\n  };\n\n  this._formatCVC = function (cvc, card) {\n    var maxCVCLength = card.code.size;\n    return limitLength(removeNonNumber(cvc), maxCVCLength);\n  };\n\n  this._displayedFields = [].concat(_toConsumableArray(displayedFields), [\"type\"]);\n};\n\nexport { CCFieldFormatter as default };","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/node_modules/react-native-input-credit-card/src/CCFieldFormatter.js"],"names":["valid","removeNonNumber","removeLeadingSpaces","pick","limitLength","string","maxLength","substr","addGaps","gaps","offsets","concat","length","map","end","index","start","filter","part","join","FALLBACK_CARD","lengths","code","size","CCFieldFormatter","displayedFields","formatValues","values","card","number","type","_formatNumber","expiry","_formatExpiry","cvc","_formatCVC","name","postalCode","trim","_displayedFields","numberSanitized","lengthSanitized","formatted","sanitized","match","maxCVCLength"],"mappings":"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","sourcesContent":["import valid from \"card-validator\";\nimport { removeNonNumber, removeLeadingSpaces } from \"./Utilities\";\nimport pick from \"lodash.pick\";\n\nconst limitLength = (string = \"\", maxLength) => string.substr(0, maxLength);\nconst addGaps = (string = \"\", gaps) => {\n  const offsets = [0].concat(gaps).concat([string.length]);\n\n  return offsets.map((end, index) => {\n    if (index === 0) return \"\";\n    const start = offsets[index - 1];\n    return string.substr(start, end - start);\n  }).filter(part => part !== \"\").join(\" \");\n};\n\nconst FALLBACK_CARD = { gaps: [4, 8, 12], lengths: [16], code: { size: 3 } };\nexport default class CCFieldFormatter {\n  constructor(displayedFields) {\n    this._displayedFields = [...displayedFields, \"type\"];\n  }\n\n  formatValues = (values) => {\n    const card = valid.number(values.number).card || FALLBACK_CARD;\n\n    return pick({\n      type: card.type,\n      number: this._formatNumber(values.number, card),\n      expiry: this._formatExpiry(values.expiry),\n      cvc: this._formatCVC(values.cvc, card),\n      name: removeLeadingSpaces(values.name),\n      postalCode: (values.postalCode || '').trim(),\n    }, this._displayedFields);\n  };\n\n  _formatNumber = (number, card) => {\n    const numberSanitized = removeNonNumber(number);\n    const maxLength = card.lengths[card.lengths.length - 1];\n    const lengthSanitized = limitLength(numberSanitized, maxLength);\n    const formatted = addGaps(lengthSanitized, card.gaps);\n    return formatted;\n  };\n\n  _formatExpiry = (expiry) => {\n    const sanitized = limitLength(removeNonNumber(expiry), 4);\n    if (sanitized.match(/^[2-9]$/)) { return `0${sanitized}`; }\n    if (sanitized.length > 2) { return `${sanitized.substr(0, 2)}/${sanitized.substr(2, sanitized.length)}`; }\n    return sanitized;\n  };\n\n  _formatCVC = (cvc, card) => {\n    const maxCVCLength = card.code.size;\n    return limitLength(removeNonNumber(cvc), maxCVCLength);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}