{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\2020-2021\\\\II\\\\aws\\\\project\\\\TechComeReact\\\\e-commerce-app-react-native\\\\src\\\\screens\\\\CartScreen\\\\components\\\\TotalButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport CustomText from \"../../../components/UI/CustomText\";\nimport Colors from \"../../../utils/Colors\";\nimport NumberFormat from \"../../../components/UI/NumberFormat\";\nimport PropTypes from 'prop-types';\nexport var TotalButton = function (_React$PureComponent) {\n  _inherits(TotalButton, _React$PureComponent);\n\n  var _super = _createSuper(TotalButton);\n\n  function TotalButton() {\n    _classCallCheck(this, TotalButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TotalButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          total = _this$props.total,\n          navigation = _this$props.navigation,\n          cartItems = _this$props.cartItems,\n          cartId = _this$props.cartId;\n      return React.createElement(View, {\n        style: styles.total,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          justifyContent: 'space-between'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }\n      }, React.createElement(CustomText, {\n        style: {\n          fontSize: 14,\n          fontWeight: '500',\n          color: Colors.text\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }\n      }, \"Th\\xE0nh ti\\u1EC1n\"), React.createElement(NumberFormat, {\n        price: total.toString(),\n        style: {\n          fontSize: 14\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      })), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate('PreOrderScreen', {\n            cartItems: cartItems,\n            total: total,\n            cartId: cartId\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.btn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, React.createElement(CustomText, {\n        style: {\n          color: '#fff',\n          fontSize: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, \"Ti\\u1EBFn h\\xE0nh \\u0111\\u1EB7t h\\xE0ng\"))));\n    }\n  }]);\n\n  return TotalButton;\n}(React.PureComponent);\nTotalButton.propTypes = {\n  total: PropTypes.number.isRequired,\n  navigation: PropTypes.object.isRequired,\n  cartItems: PropTypes.array.isRequired,\n  cartId: PropTypes.string\n};\nvar styles = StyleSheet.create({\n  total: {\n    width: '100%',\n    position: 'absolute',\n    bottom: 20,\n    left: 0,\n    paddingHorizontal: 10,\n    paddingVertical: 5\n  },\n  btn: {\n    width: '100%',\n    height: 50,\n    backgroundColor: Colors.red,\n    marginTop: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 5\n  },\n  price: {\n    color: 'red',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/screens/CartScreen/components/TotalButton.js"],"names":["React","CustomText","Colors","NumberFormat","PropTypes","TotalButton","props","total","navigation","cartItems","cartId","styles","flexDirection","justifyContent","fontSize","fontWeight","color","text","toString","navigate","btn","PureComponent","propTypes","number","isRequired","object","array","string","StyleSheet","create","width","position","bottom","left","paddingHorizontal","paddingVertical","height","backgroundColor","red","marginTop","alignItems","borderRadius","price"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\r\n//Text\r\nimport CustomText from '../../../components/UI/CustomText';\r\n//Colors\r\nimport Colors from '../../../utils/Colors';\r\nimport NumberFormat from '../../../components/UI/NumberFormat';\r\n//PropTypes check\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TotalButton extends React.PureComponent {\r\n  render() {\r\n    const { total, navigation, cartItems, cartId } = this.props;\r\n    return (\r\n      <View style={styles.total}>\r\n        <View\r\n          style={{\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <CustomText\r\n            style={{ fontSize: 14, fontWeight: '500', color: Colors.text }}\r\n          >\r\n            Thành tiền\r\n          </CustomText>\r\n          <NumberFormat price={total.toString()} style={{ fontSize: 14 }} />\r\n        </View>\r\n\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            navigation.navigate('PreOrderScreen', {\r\n              cartItems,\r\n              total,\r\n              cartId,\r\n            });\r\n          }}\r\n        >\r\n          <View style={styles.btn}>\r\n            <CustomText style={{ color: '#fff', fontSize: 16 }}>\r\n              Tiến hành đặt hàng\r\n            </CustomText>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\nTotalButton.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  navigation: PropTypes.object.isRequired,\r\n  cartItems: PropTypes.array.isRequired,\r\n  cartId: PropTypes.string,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  total: {\r\n    width: '100%',\r\n    position: 'absolute',\r\n    bottom: 20,\r\n    left: 0,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n  },\r\n  btn: {\r\n    width: '100%',\r\n    height: 50,\r\n    backgroundColor: Colors.red,\r\n    marginTop: 5,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderRadius: 5,\r\n  },\r\n  price: {\r\n    color: 'red',\r\n    fontSize: 16,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}