{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Notifications from \"expo-notifications\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar LocalNotification = function LocalNotification() {\n  var trigger = Platform.OS === \"ios\" ? {\n    hour: 8,\n    minute: 15,\n    type: \"daily\"\n  } : {\n    hour: 8,\n    minute: 15,\n    repeats: true\n  };\n  useEffect(function () {\n    Notifications.cancelAllScheduledNotificationsAsync();\n\n    var triggerNotificationHandler = function triggerNotificationHandler() {\n      return _regeneratorRuntime.async(function triggerNotificationHandler$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: \"Ngày mới tốt lành bạn nhé ^^\",\n                  body: \"Hãy lựa chọn sự may mắn, mua sự thành công cùng với CatTuong\",\n                  data: {\n                    mySpecialData: \"Some text\"\n                  }\n                },\n                trigger: trigger\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    triggerNotificationHandler();\n    var backgroundSubscription = Notifications.addNotificationResponseReceivedListener(function (response) {});\n    var foregroundSubscription = Notifications.addNotificationReceivedListener(function (notification) {});\n    return function () {\n      backgroundSubscription.remove();\n      foregroundSubscription.remove();\n    };\n  }, []);\n  return React.createElement(React.Fragment, null);\n};\n\nexport default LocalNotification;","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/components/Notification/LocalNotification.js"],"names":["React","useEffect","Notifications","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","LocalNotification","trigger","Platform","OS","hour","minute","type","repeats","cancelAllScheduledNotificationsAsync","triggerNotificationHandler","scheduleNotificationAsync","content","title","body","data","mySpecialData","backgroundSubscription","addNotificationResponseReceivedListener","response","foregroundSubscription","addNotificationReceivedListener","notification","remove"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAEAA,aAAa,CAACC,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa;AAC/BC,cAAAA,eAAe,EAAE,IADc;AAE/BC,cAAAA,eAAe,EAAE,KAFc;AAG/BC,cAAAA,cAAc,EAAE;AAHe,aAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;;AAQA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,MAAMC,OAAO,GACXC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACI;AACEC,IAAAA,IAAI,EAAE,CADR;AAEEC,IAAAA,MAAM,EAAE,EAFV;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADJ,GAMI;AACEF,IAAAA,IAAI,EAAE,CADR;AAEEC,IAAAA,MAAM,EAAE,EAFV;AAGEE,IAAAA,OAAO,EAAE;AAHX,GAPN;AAYAd,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,aAAa,CAACc,oCAAd;;AACA,QAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC3Bf,aAAa,CAACgB,yBAAd,CAAwC;AAC5CC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,KAAK,EAAE,8BADA;AAEPC,kBAAAA,IAAI,EAAE,8DAFC;AAGPC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,aAAa,EAAE;AAAjB;AAHC,iBADmC;AAM5Cd,gBAAAA,OAAO,EAAEA;AANmC,eAAxC,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnC;;AAUAQ,IAAAA,0BAA0B;AAG1B,QAAMO,sBAAsB,GAAGtB,aAAa,CAACuB,uCAAd,CAC7B,UAACC,QAAD,EAAc,CAEb,CAH4B,CAA/B;AAMA,QAAMC,sBAAsB,GAAGzB,aAAa,CAAC0B,+BAAd,CAC7B,UAACC,YAAD,EAAkB,CAEjB,CAH4B,CAA/B;AAMA,WAAO,YAAM;AACXL,MAAAA,sBAAsB,CAACM,MAAvB;AACAH,MAAAA,sBAAsB,CAACG,MAAvB;AACD,KAHD;AAID,GA/BQ,EA+BN,EA/BM,CAAT;AAmCA,SAAO,yCAAP;AACD,CAjDD;;AAmDA,eAAetB,iBAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport * as Notifications from \"expo-notifications\";\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: true,\r\n  }),\r\n});\r\n\r\nconst LocalNotification = () => {\r\n  const trigger =\r\n    Platform.OS === \"ios\"\r\n      ? {\r\n          hour: 8,\r\n          minute: 15,\r\n          type: \"daily\",\r\n        }\r\n      : {\r\n          hour: 8,\r\n          minute: 15,\r\n          repeats: true,\r\n        };\r\n  useEffect(() => {\r\n    Notifications.cancelAllScheduledNotificationsAsync();\r\n    const triggerNotificationHandler = async () => {\r\n      await Notifications.scheduleNotificationAsync({\r\n        content: {\r\n          title: \"Ngày mới tốt lành bạn nhé ^^\",\r\n          body: \"Hãy lựa chọn sự may mắn, mua sự thành công cùng với CatTuong\",\r\n          data: { mySpecialData: \"Some text\" },\r\n        },\r\n        trigger: trigger,\r\n      });\r\n    };\r\n    triggerNotificationHandler();\r\n    //cancle\r\n    // Notifications.cancelAllScheduledNotificationsAsync();\r\n    const backgroundSubscription = Notifications.addNotificationResponseReceivedListener(\r\n      (response) => {\r\n        // console.log(response);\r\n      }\r\n    );\r\n\r\n    const foregroundSubscription = Notifications.addNotificationReceivedListener(\r\n      (notification) => {\r\n        // console.log(notification);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      backgroundSubscription.remove();\r\n      foregroundSubscription.remove();\r\n    };\r\n  }, []);\r\n\r\n  //local notifications\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default LocalNotification;\r\n"]},"metadata":{},"sourceType":"module"}