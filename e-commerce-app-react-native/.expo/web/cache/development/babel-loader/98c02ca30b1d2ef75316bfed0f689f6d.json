{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\2020-2021\\\\II\\\\aws\\\\project\\\\TechComeReact\\\\e-commerce-app-react-native\\\\src\\\\screens\\\\FavoriteScreen\\\\FavoriteScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchFavorite } from \"../../reducers\";\nimport { Header, FavoriteBody } from \"./components\";\nimport Colors from \"../../utils/Colors\";\nimport SkeletonLoadingCart from \"../../components/Loaders/SkeletonLoadingCart\";\nexport var FavoriteScreen = function FavoriteScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isRefreshing = _useState2[0],\n      setIsRefreshing = _useState2[1];\n\n  var user = useSelector(function (state) {\n    return state.auth.user;\n  });\n  var loading = useSelector(function (state) {\n    return state.fav.isLoading;\n  });\n  var FavoriteProducts = useSelector(function (state) {\n    return state.fav.favoriteList;\n  });\n  var dispatch = useDispatch();\n  var loadFavoriteProducts = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsRefreshing(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(fetchFavorite()));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            alert(_context.t0.message);\n\n          case 9:\n            setIsRefreshing(false);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }, [dispatch, setIsRefreshing]);\n  useEffect(function () {\n    loadFavoriteProducts();\n  }, [user.userid]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    navigation: navigation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), loading ? React.createElement(SkeletonLoadingCart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }) : React.createElement(FavoriteBody, {\n    user: user,\n    FavoriteProducts: FavoriteProducts,\n    navigation: navigation,\n    loadFavoriteProducts: loadFavoriteProducts,\n    isRefreshing: isRefreshing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.white\n  }\n});","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/screens/FavoriteScreen/FavoriteScreen.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","fetchFavorite","Header","FavoriteBody","Colors","SkeletonLoadingCart","FavoriteScreen","navigation","isRefreshing","setIsRefreshing","user","state","auth","loading","fav","isLoading","FavoriteProducts","favoriteList","dispatch","loadFavoriteProducts","alert","message","userid","styles","container","StyleSheet","create","flex","backgroundColor","white"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;;;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,aAAT;AAEA,SAASC,MAAT,EAAiBC,YAAjB;AACA,OAAOC,MAAP;AAEA,OAAOC,mBAAP;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAChD,kBAAwCX,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOY,YAAP;AAAA,MAAqBC,eAArB;;AACA,MAAMC,IAAI,GAAGX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,CAAWF,IAAtB;AAAA,GAAD,CAAxB;AACA,MAAMG,OAAO,GAAGd,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACG,GAAN,CAAUC,SAArB;AAAA,GAAD,CAA3B;AACA,MAAMC,gBAAgB,GAAGjB,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACG,GAAN,CAAUG,YAArB;AAAA,GAAD,CAApC;AACA,MAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AAEA,MAAMmB,oBAAoB,GAAGtB,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AACvCY,YAAAA,eAAe,CAAC,IAAD,CAAf;AADuC;AAAA;AAAA,6CAG/BS,QAAQ,CAACjB,aAAa,EAAd,CAHuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKrCmB,YAAAA,KAAK,CAAC,YAAIC,OAAL,CAAL;;AALqC;AAOvCZ,YAAAA,eAAe,CAAC,KAAD,CAAf;;AAPuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAQrC,CAACS,QAAD,EAAWT,eAAX,CARqC,CAAxC;AASAX,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,CAACT,IAAI,CAACY,MAAN,CAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAEjB,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGM,OAAO,GACN,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN,oBAAC,YAAD;AACE,IAAA,IAAI,EAAEH,IADR;AAEE,IAAA,gBAAgB,EAAEM,gBAFpB;AAGE,IAAA,UAAU,EAAET,UAHd;AAIE,IAAA,oBAAoB,EAAEY,oBAJxB;AAKE,IAAA,YAAY,EAAEX,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF;AAgBD,CApCM;AAqCP,IAAMe,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAExB,MAAM,CAACyB;AAFf;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { View, StyleSheet } from \"react-native\";\r\n//Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n//Action\r\nimport { fetchFavorite } from \"../../reducers\";\r\n//Component\r\nimport { Header, FavoriteBody } from \"./components\";\r\nimport Colors from \"../../utils/Colors\";\r\n//Loader\r\nimport SkeletonLoadingCart from \"../../components/Loaders/SkeletonLoadingCart\";\r\n\r\nexport const FavoriteScreen = ({ navigation }) => {\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const user = useSelector((state) => state.auth.user);\r\n  const loading = useSelector((state) => state.fav.isLoading);\r\n  const FavoriteProducts = useSelector((state) => state.fav.favoriteList);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadFavoriteProducts = useCallback(async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await dispatch(fetchFavorite());\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n    setIsRefreshing(false);\r\n  }, [dispatch, setIsRefreshing]);\r\n  useEffect(() => {\r\n    loadFavoriteProducts();\r\n  }, [user.userid]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Header navigation={navigation} />\r\n      {loading ? (\r\n        <SkeletonLoadingCart />\r\n      ) : (\r\n        <FavoriteBody\r\n          user={user}\r\n          FavoriteProducts={FavoriteProducts}\r\n          navigation={navigation}\r\n          loadFavoriteProducts={loadFavoriteProducts}\r\n          isRefreshing={isRefreshing}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: Colors.white,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}