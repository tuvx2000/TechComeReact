{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"tint\", \"intensity\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport getBackgroundColor from \"./getBackgroundColor\";\n\nvar BlurView = function () {\n  var BlurView = function (_React$Component) {\n    _inherits(BlurView, _React$Component);\n\n    var _super = _createSuper(BlurView);\n\n    function BlurView() {\n      _classCallCheck(this, BlurView);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(BlurView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            tint = _this$props.tint,\n            intensity = _this$props.intensity,\n            _this$props$style = _this$props.style,\n            style = _this$props$style === void 0 ? {} : _this$props$style,\n            props = _objectWithoutProperties(_this$props, _excluded);\n\n        var blurStyle = getBlurStyle({\n          tint: tint,\n          intensity: intensity\n        });\n        return React.createElement(View, _extends({}, props, {\n          style: [style, blurStyle]\n        }));\n      }\n    }]);\n\n    return BlurView;\n  }(React.Component);\n\n  BlurView.propTypes = _objectSpread({\n    tint: PropTypes.oneOf(['light', 'default', 'dark'])\n  }, ViewPropTypes);\n  BlurView.defaultProps = {\n    tint: 'default',\n    intensity: 50\n  };\n  return BlurView;\n}();\n\nexport default BlurView;\n\nfunction isBlurSupported() {\n  return typeof CSS !== 'undefined' && (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') || CSS.supports('backdrop-filter', 'blur(1px)'));\n}\n\nfunction getBlurStyle(_ref) {\n  var intensity = _ref.intensity,\n      tint = _ref.tint;\n  var style = {\n    backgroundColor: getBackgroundColor(intensity, tint)\n  };\n\n  if (isBlurSupported()) {\n    style.backdropFilter = \"saturate(180%) blur(\" + intensity * 0.2 + \"px)\";\n  }\n\n  return style;\n}","map":{"version":3,"sources":["../src/BlurView.web.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;SACe,a;AAGf,OAAO,kBAAP;;AAEA,IAAA,QAAA,GAAA,YAAA;AAAA,MAAqB,QAArB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,aAWE,kBAAM;AACJ,0BAAkD,KAAK,KAAvD;AAAA,YAAQ,IAAR,eAAQ,IAAR;AAAA,YAAc,SAAd,eAAc,SAAd;AAAA,4CAAyB,KAAzB;AAAA,YAAyB,KAAzB,kCAAiC,EAAjC;AAAA,YAAwC,KAAxC;;AAEA,YAAM,SAAS,GAAG,YAAY,CAAC;AAAE,UAAA,IAAI,EAAJ,IAAF;AAAQ,UAAA,SAAS,EAAT;AAAR,SAAD,CAA9B;AAEA,eAAO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,SAAA,EAAA,EAAK,KAAL,EAAU;AAAE,UAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR;AAAT,SAAV,CAAL,CAAP;AACD;AAjBH;;AAAA;AAAA,IAAsC,KAAK,CAAC,SAA5C;;AACS,EAAA,QAAA,CAAA,SAAA;AACL,IAAA,IAAI,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAhB;AADD,KAEF,aAFE;AAKA,EAAA,QAAA,CAAA,YAAA,GAAe;AACpB,IAAA,IAAI,EAAE,SADc;AAEpB,IAAA,SAAS,EAAE;AAFS,GAAf;AAYT,SAAA,QAAA;AAAC,CAlBD,EAAA;;eAAqB,Q;;AAoBrB,SAAS,eAAT,GAAwB;AAGtB,SACE,OAAO,GAAP,KAAe,WAAf,KACC,GAAG,CAAC,QAAJ,CAAa,yBAAb,EAAwC,WAAxC,KACC,GAAG,CAAC,QAAJ,CAAa,iBAAb,EAAgC,WAAhC,CAFF,CADF;AAKD;;AAED,SAAS,YAAT,OAAyC;AAAA,MAAjB,SAAiB,QAAjB,SAAiB;AAAA,MAAN,IAAM,QAAN,IAAM;AACvC,MAAM,KAAK,GAA2B;AACpC,IAAA,eAAe,EAAE,kBAAkB,CAAC,SAAD,EAAY,IAAZ;AADC,GAAtC;;AAIA,MAAI,eAAe,EAAnB,EAAuB;AACrB,IAAA,KAAK,CAAC,cAAN,4BAA8C,SAAS,GAAG,GAA1D;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { View, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, BlurProps } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nexport default class BlurView extends React.Component<BlurProps> {\n  static propTypes = {\n    tint: PropTypes.oneOf(['light', 'default', 'dark']),\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  render() {\n    const { tint, intensity, style = {}, ...props } = this.props;\n\n    const blurStyle = getBlurStyle({ tint, intensity });\n\n    return <View {...props} style={[style, blurStyle]} />;\n  }\n}\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  return (\n    typeof CSS !== 'undefined' &&\n    (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') ||\n      CSS.supports('backdrop-filter', 'blur(1px)'))\n  );\n}\n\nfunction getBlurStyle({ intensity, tint }): Record<string, string> {\n  const style: Record<string, string> = {\n    backgroundColor: getBackgroundColor(intensity, tint),\n  };\n\n  if (isBlurSupported()) {\n    style.backdropFilter = `saturate(180%) blur(${intensity * 0.2}px)`;\n  }\n\n  return style;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}