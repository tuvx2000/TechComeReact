{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport ExpoLocalAuthentication from \"./ExpoLocalAuthentication\";\nimport { AuthenticationType } from \"./LocalAuthentication.types\";\nexport { AuthenticationType };\nexport function hasHardwareAsync() {\n  return _regeneratorRuntime.async(function hasHardwareAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoLocalAuthentication.hasHardwareAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoLocalAuthentication.hasHardwareAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function supportedAuthenticationTypesAsync() {\n  return _regeneratorRuntime.async(function supportedAuthenticationTypesAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoLocalAuthentication.supportedAuthenticationTypesAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isEnrolledAsync() {\n  return _regeneratorRuntime.async(function isEnrolledAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoLocalAuthentication.isEnrolledAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoLocalAuthentication.isEnrolledAsync());\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function authenticateAsync() {\n  var options,\n      promptMessage,\n      result,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function authenticateAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n\n          if (ExpoLocalAuthentication.authenticateAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n\n        case 3:\n          if (typeof options === 'string') {\n            console.warn('String argument in LocalAuthentication.authenticateAsync has been deprecated. Please use options object with `promptMessage` key instead.');\n            options = {\n              promptMessage: options\n            };\n          }\n\n          if (options.hasOwnProperty('promptMessage')) {\n            invariant(typeof options.promptMessage === 'string' && options.promptMessage.length, 'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.');\n          }\n\n          promptMessage = options.promptMessage || 'Authenticate';\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ExpoLocalAuthentication.authenticateAsync(_objectSpread(_objectSpread({}, options), {}, {\n            promptMessage: promptMessage\n          })));\n\n        case 8:\n          result = _context4.sent;\n\n          if (result.warning) {\n            console.warn(result.warning);\n          }\n\n          return _context4.abrupt(\"return\", result);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function cancelAuthenticate() {\n  return _regeneratorRuntime.async(function cancelAuthenticate$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoLocalAuthentication.cancelAuthenticate) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoLocalAuthentication.cancelAuthenticate());\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AACA,OAAO,SAAP,MAAsB,WAAtB;AAEA,OAAO,uBAAP;AACA,SAEE,kBAFF;AAMA,SAAqC,kBAArC;AAEA,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,uBAAuB,CAAC,gBADxB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,kBAArD,CAFH;;AAAA;AAAA;AAAA,2CAIQ,uBAAuB,CAAC,gBAAxB,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAe,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,uBAAuB,CAAC,iCADxB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,mCAArD,CAFH;;AAAA;AAAA;AAAA,2CAIQ,uBAAuB,CAAC,iCAAxB,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAe,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,uBAAuB,CAAC,eADxB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,iBAArD,CAFH;;AAAA;AAAA;AAAA,2CAIQ,uBAAuB,CAAC,eAAxB,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,OADK,8DACiC,EADjC;;AAAA,cAGA,uBAAuB,CAAC,iBAHxB;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,mBAArD,CAJH;;AAAA;AAQL,cAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAA,OAAO,CAAC,IAAR,CACE,2IADF;AAGA,YAAA,OAAO,GAAG;AAAE,cAAA,aAAa,EAAE;AAAjB,aAAV;AACD;;AAED,cAAI,OAAO,CAAC,cAAR,CAAuB,eAAvB,CAAJ,EAA6C;AAC3C,YAAA,SAAS,CACP,OAAO,OAAO,CAAC,aAAf,KAAiC,QAAjC,IAA6C,OAAO,CAAC,aAAR,CAAsB,MAD5D,EAEP,6FAFO,CAAT;AAID;;AAEK,UAAA,aAtBD,GAsBiB,OAAO,CAAC,aAAR,IAAyB,cAtB1C;AAAA;AAAA,2CAuBgB,uBAAuB,CAAC,iBAAxB,iCAA+C,OAA/C;AAAwD,YAAA,aAAa,EAAb;AAAxD,aAvBhB;;AAAA;AAuBC,UAAA,MAvBD;;AAyBL,cAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,YAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,OAApB;AACD;;AA3BI,4CA4BE,MA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BP,OAAO,SAAe,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,uBAAuB,CAAC,kBADxB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,2BAAxB,EAAqD,oBAArD,CAFH;;AAAA;AAAA;AAAA,2CAIC,uBAAuB,CAAC,kBAAxB,EAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult };\n\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  // Warn if using an old API - to be removed in SDK35.\n  if (typeof options === 'string') {\n    console.warn(\n      'String argument in LocalAuthentication.authenticateAsync has been deprecated. Please use options object with `promptMessage` key instead.'\n    );\n    options = { promptMessage: options };\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  if (result.warning) {\n    console.warn(result.warning);\n  }\n  return result;\n}\n\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}