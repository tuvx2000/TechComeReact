{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\n\nvar AskingNotificationPermissonToken = function AskingNotificationPermissonToken() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function AskingNotificationPermissonToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 2:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 8:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 11:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 14;\n            break;\n          }\n\n          console.log('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\", token = '');\n\n        case 14:\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 16:\n          token = _context.sent.data;\n          return _context.abrupt(\"return\", token);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default AskingNotificationPermissonToken;","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/components/Notification/AskingNotiPermission.js"],"names":["Notifications","Permissions","AskingNotificationPermissonToken","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","console","log","token","getExpoPushTokenAsync","data"],"mappings":";AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;;AAEA,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEED,WAAW,CAACE,QAAZ,CACvCF,WAAW,CAACG,aAD2B,CAFF;;AAAA;AAAA;AAEvBC,UAAAA,cAFuB,yBAE/BC,MAF+B;AAKnCC,UAAAA,WALmC,GAKrBF,cALqB;;AAAA,gBAMnCA,cAAc,KAAK,SANgB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAOZJ,WAAW,CAACO,QAAZ,CAAqBP,WAAW,CAACG,aAAjC,CAPY;;AAAA;AAAA;AAO7BE,UAAAA,MAP6B,yBAO7BA,MAP6B;AAQrCC,UAAAA,WAAW,GAAGD,MAAd;;AARqC;AAAA,gBAUnCC,WAAW,KAAK,SAVmB;AAAA;AAAA;AAAA;;AAWrCE,UAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AAXqC,2CAY7BC,KAAK,GAAG,EAZqB;;AAAA;AAAA;AAAA,2CAcxBX,aAAa,CAACY,qBAAd,EAdwB;;AAAA;AAcvCD,UAAAA,KAduC,iBAceE,IAdf;AAAA,2CAehCF,KAfgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzC;;AAkBA,eAAeT,gCAAf","sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nconst AskingNotificationPermissonToken = async () => {\r\n  let token;\r\n  const { status: existingStatus } = await Permissions.getAsync(\r\n    Permissions.NOTIFICATIONS,\r\n  );\r\n  let finalStatus = existingStatus;\r\n  if (existingStatus !== 'granted') {\r\n    const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n    finalStatus = status;\r\n  }\r\n  if (finalStatus !== 'granted') {\r\n    console.log('Failed to get push token for push notification!');\r\n    return (token = '');\r\n  }\r\n  token = (await Notifications.getExpoPushTokenAsync()).data;\r\n  return token;\r\n};\r\n\r\nexport default AskingNotificationPermissonToken;\r\n"]},"metadata":{},"sourceType":"module"}