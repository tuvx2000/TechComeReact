{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL } from \"../../utils/Config\";\nimport { timeoutPromise } from \"../../utils/Tools\";\nexport var FAVORITE_LOADING = \"FAVORITE_LOADING\";\nexport var FAVORITE_FAILURE = \"FAVORITE_FAILURE\";\nexport var FETCH_FAVORITE = \"FETCH_FAVORITE\";\nexport var ADD_FAVORITE = \"ADD_FAVORITE\";\nexport var REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\nexport var fetchFavorite = function fetchFavorite() {\n  return function _callee(dispatch, getState) {\n    var user, response, resData, filterUserFavorite, items;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user = getState().auth.user;\n\n            if (!(user.userid != undefined)) {\n              _context.next = 22;\n              break;\n            }\n\n            dispatch({\n              type: FAVORITE_LOADING\n            });\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/favoriteList\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"GET\"\n            })));\n\n          case 6:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            dispatch({\n              type: FAVORITE_FAILURE\n            });\n            throw new Error(\"Something went wrong!, can't get favorite list\");\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 12:\n            resData = _context.sent;\n            filterUserFavorite = resData.content.filter(function (userFavorite) {\n              return userFavorite.userId === user.userid;\n            });\n            items = [];\n\n            if (filterUserFavorite.length > 0) {\n              items = filterUserFavorite[0].items;\n            }\n\n            dispatch({\n              type: FETCH_FAVORITE,\n              favoriteList: items\n            });\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](3);\n            throw _context.t0;\n\n          case 22:\n            return _context.abrupt(\"return\");\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 19]], Promise);\n  };\n};\nexport var addFavorite = function addFavorite(item) {\n  return function _callee2(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: FAVORITE_LOADING\n            });\n            user = getState().auth.user;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/favoriteList/post\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                userId: user.userid,\n                items: [{\n                  item: item._id\n                }]\n              })\n            })));\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: FAVORITE_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: ADD_FAVORITE,\n              addItem: item\n            });\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](2);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};\nexport var removeFavorite = function removeFavorite(id) {\n  return function _callee3(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: FAVORITE_LOADING\n            });\n            user = getState().auth.user;\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/favoriteList/\" + user.userid, {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"PATCH\",\n              body: JSON.stringify({\n                item: id\n              })\n            })));\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: FAVORITE_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: REMOVE_FAVORITE,\n              itemId: id\n            });\n            _context3.next = 15;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](2);\n            throw _context3.t0;\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/reducers/favorite/favoriteActions.js"],"names":["API_URL","timeoutPromise","FAVORITE_LOADING","FAVORITE_FAILURE","FETCH_FAVORITE","ADD_FAVORITE","REMOVE_FAVORITE","fetchFavorite","dispatch","getState","user","auth","userid","undefined","type","fetch","headers","Accept","token","method","response","ok","Error","json","resData","filterUserFavorite","content","filter","userFavorite","userId","items","length","favoriteList","addFavorite","item","body","JSON","stringify","_id","addItem","removeFavorite","id","itemId"],"mappings":"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","sourcesContent":["import { API_URL } from \"../../utils/Config\";\r\nimport { timeoutPromise } from \"../../utils/Tools\";\r\nexport const FAVORITE_LOADING = \"FAVORITE_LOADING\";\r\nexport const FAVORITE_FAILURE = \"FAVORITE_FAILURE\";\r\nexport const FETCH_FAVORITE = \"FETCH_FAVORITE\";\r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\r\n\r\n//Fetch Favorite\r\nexport const fetchFavorite = () => {\r\n  return async (dispatch, getState) => {\r\n    const user = getState().auth.user;\r\n    if (user.userid != undefined) {\r\n      dispatch({\r\n        type: FAVORITE_LOADING,\r\n      });\r\n      try {\r\n        const response = await timeoutPromise(\r\n          fetch(`${API_URL}/favoriteList`, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n              \"auth-token\": user.token,\r\n            },\r\n            method: \"GET\",\r\n          })\r\n        );\r\n        if (!response.ok) {\r\n          dispatch({\r\n            type: FAVORITE_FAILURE,\r\n          });\r\n          throw new Error(\"Something went wrong!, can't get favorite list\");\r\n        }\r\n        const resData = await response.json();\r\n\r\n        const filterUserFavorite = resData.content.filter(\r\n          (userFavorite) => userFavorite.userId === user.userid\r\n        );\r\n        let items = [];\r\n        if (filterUserFavorite.length > 0) {\r\n          items = filterUserFavorite[0].items;\r\n        }\r\n        dispatch({\r\n          type: FETCH_FAVORITE,\r\n          favoriteList: items,\r\n        });\r\n      } catch (err) {\r\n        throw err;\r\n      }\r\n    }\r\n    return;\r\n  };\r\n};\r\n//Add Favorite\r\nexport const addFavorite = (item) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: FAVORITE_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/favoriteList/post`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            userId: user.userid,\r\n            items: [\r\n              {\r\n                item: item._id,\r\n              },\r\n            ],\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: FAVORITE_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      dispatch({\r\n        type: ADD_FAVORITE,\r\n        addItem: item,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\nexport const removeFavorite = (id) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: FAVORITE_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/favoriteList/${user.userid}`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"PATCH\",\r\n          body: JSON.stringify({\r\n            item: id,\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: FAVORITE_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      dispatch({\r\n        type: REMOVE_FAVORITE,\r\n        itemId: id,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}