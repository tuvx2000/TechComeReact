{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL } from \"../../utils/Config\";\nimport { timeoutPromise } from \"../../utils/Tools\";\nexport var FETCH_PRODUCTS = \"FETCH_PRODUCTS\";\nexport var PRODUCT_LOADING = \"PRODUCT_LOADING\";\nexport var PRODUCT_FAILURE = \"PRODUCT_FAILURE\";\nexport var fetchProducts = function fetchProducts() {\n  return function _callee(dispatch) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: PRODUCT_LOADING\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/product\", {\n              method: \"GET\"\n            })));\n\n          case 4:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch({\n              type: PRODUCT_FAILURE\n            });\n            throw new Error(\"Something went wrong!, can't get the products\");\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            resData = _context.sent;\n            dispatch({\n              type: FETCH_PRODUCTS,\n              products: resData.content\n            });\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/reducers/product/productActions.js"],"names":["API_URL","timeoutPromise","FETCH_PRODUCTS","PRODUCT_LOADING","PRODUCT_FAILURE","fetchProducts","dispatch","type","fetch","method","response","ok","Error","json","resData","products","content"],"mappings":";AAAA,SAASA,OAAT;AACA,SAASC,cAAT;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEJ;AADC,aAAD,CAAR;AADK;AAAA;AAAA,6CAKoBF,cAAc,CACnCO,KAAK,CAAIR,OAAJ,eAAuB;AAC1BS,cAAAA,MAAM,EAAE;AADkB,aAAvB,CAD8B,CALlC;;AAAA;AAKGC,YAAAA,QALH;;AAAA,gBAWEA,QAAQ,CAACC,EAXX;AAAA;AAAA;AAAA;;AAYDL,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEH;AADC,aAAD,CAAR;AAZC,kBAeK,IAAIQ,KAAJ,CAAU,+CAAV,CAfL;;AAAA;AAAA;AAAA,6CAiBmBF,QAAQ,CAACG,IAAT,EAjBnB;;AAAA;AAiBGC,YAAAA,OAjBH;AAkBHR,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEL,cADC;AAEPa,cAAAA,QAAQ,EAAED,OAAO,CAACE;AAFX,aAAD,CAAR;AAlBG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0BD,CA3BM","sourcesContent":["import { API_URL } from \"../../utils/Config\";\r\nimport { timeoutPromise } from \"../../utils/Tools\";\r\nexport const FETCH_PRODUCTS = \"FETCH_PRODUCTS\";\r\nexport const PRODUCT_LOADING = \"PRODUCT_LOADING\";\r\nexport const PRODUCT_FAILURE = \"PRODUCT_FAILURE\";\r\n\r\nexport const fetchProducts = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: PRODUCT_LOADING,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/product`, {\r\n          method: \"GET\",\r\n        })\r\n      );\r\n\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: PRODUCT_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!, can't get the products\");\r\n      }\r\n      const resData = await response.json();\r\n      dispatch({\r\n        type: FETCH_PRODUCTS,\r\n        products: resData.content,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}