{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport uuidv4 from 'uuid/v4';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\n\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\n\nexport default {\n  getInstallationIdAsync: function getInstallationIdAsync() {\n    var installationId;\n    return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n\n              if (!installationId || typeof installationId !== 'string') {\n                installationId = uuidv4();\n                localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n              }\n            } catch (error) {\n              installationId = _getFallbackInstallationId();\n            }\n\n            return _context.abrupt(\"return\", installationId);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"sources":["../src/InstallationIdProvider.web.ts"],"names":[],"mappings":";AAAA,OAAO,MAAP,MAAmB,SAAnB;AAIA,IAAM,mBAAmB,GAAG,oCAA5B;;AAGA,IAAI,0BAAyB,GAAG,qCAAK;AACnC,MAAM,qBAAqB,GAAG,MAAM,EAApC;;AACA,EAAA,0BAAyB,GAAG;AAAA,WAAM,qBAAN;AAAA,GAA5B;AACD,CAHD;;AAKA,eAAe;AACb,EAAA,sBAAsB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAGtB,gBAAI;AACF,cAAA,cAAc,GAAG,YAAY,CAAC,OAAb,CAAqB,mBAArB,CAAjB;;AACA,kBAAI,CAAC,cAAD,IAAmB,OAAO,cAAP,KAA0B,QAAjD,EAA2D;AACzD,gBAAA,cAAc,GAAG,MAAM,EAAvB;AACA,gBAAA,YAAY,CAAC,OAAb,CAAqB,mBAArB,EAA0C,cAA1C;AACD;AACF,aAND,CAME,OAAO,KAAP,EAAc;AACd,cAAA,cAAc,GAAG,0BAAyB,EAA1C;AACD;;AAXqB,6CAaf,cAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADX;AAiBb,EAAA,WAAW,EAAE,uBAAK,CAAG,CAjBR;AAkBb,EAAA,eAAe,EAAE,2BAAK,CAAG;AAlBZ,CAAf","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport { InstallationIdProvider } from './InstallationIdProvider.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as InstallationIdProvider;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}