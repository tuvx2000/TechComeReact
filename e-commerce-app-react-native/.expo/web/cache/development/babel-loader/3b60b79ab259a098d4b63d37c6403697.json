{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL } from \"../../utils/Config\";\nimport { timeoutPromise } from \"../../utils/Tools\";\nexport var CART_LOADING = \"CART_LOADING\";\nexport var CART_FAILURE = \"CART_FAILURE\";\nexport var FETCH_CART = \"FETCH_CART\";\nexport var ADD_CART = \"ADD_CART\";\nexport var RESET_CART = \"RESET_CART\";\nexport var REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport var DES_CART_QUANTITY = \"DES_CART_QUANTITY\";\nexport var fetchCart = function fetchCart() {\n  return function _callee(dispatch, getState) {\n    var user, emptyCart, response, resData, filterUserCart, carts;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user = getState().auth.user;\n            emptyCart = {\n              items: []\n            };\n\n            if (!(user.userid != undefined)) {\n              _context.next = 23;\n              break;\n            }\n\n            dispatch({\n              type: CART_LOADING\n            });\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/cart\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"GET\"\n            })));\n\n          case 7:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            dispatch({\n              type: CART_FAILURE\n            });\n            throw new Error(\"Something went wrong!, can't get your carts\");\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            filterUserCart = resData.content.filter(function (userCart) {\n              return userCart.userId === user.userid;\n            });\n            carts = emptyCart;\n\n            if (filterUserCart.length > 0) {\n              carts = filterUserCart[0];\n            }\n\n            dispatch({\n              type: FETCH_CART,\n              carts: carts\n            });\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](4);\n            throw _context.t0;\n\n          case 23:\n            return _context.abrupt(\"return\");\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 20]], Promise);\n  };\n};\nexport var addToCart = function addToCart(item) {\n  return function _callee2(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: CART_LOADING\n            });\n            user = getState().auth.user;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/cart/post\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                userId: user.userid,\n                items: [{\n                  item: item._id,\n                  quantity: 1\n                }]\n              })\n            })));\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: CART_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: \"ADD_CART\",\n              cartItem: item\n            });\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](2);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};\nexport var removeFromCart = function removeFromCart(cartId, itemId) {\n  return function _callee3(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: CART_LOADING\n            });\n            user = getState().auth.user;\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/cart/cartitem/\" + cartId, {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"DELETE\",\n              body: JSON.stringify({\n                item: itemId\n              })\n            })));\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: CART_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: \"REMOVE_FROM_CART\",\n              itemId: itemId\n            });\n            _context3.next = 15;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](2);\n            throw _context3.t0;\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};\nexport var decCartQuantity = function decCartQuantity(cartId, itemId) {\n  return function _callee4(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch({\n              type: CART_LOADING\n            });\n            user = getState().auth.user;\n            _context4.prev = 2;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/cart/cartitem/\" + cartId, {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"PUT\",\n              body: JSON.stringify({\n                item: itemId,\n                quantity: \"decrease\"\n              })\n            })));\n\n          case 5:\n            response = _context4.sent;\n\n            if (response.ok) {\n              _context4.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: CART_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: \"DES_CART_QUANTITY\",\n              cartItemId: itemId\n            });\n            _context4.next = 15;\n            break;\n\n          case 12:\n            _context4.prev = 12;\n            _context4.t0 = _context4[\"catch\"](2);\n            throw _context4.t0;\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};\nexport var resetCart = function resetCart(cartId) {\n  return function _callee5(dispatch, getState) {\n    var user, response;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch({\n              type: CART_LOADING\n            });\n            user = getState().auth.user;\n            _context5.prev = 2;\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/cart/\" + cartId, {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": user.token\n              },\n              method: \"DELETE\"\n            })));\n\n          case 5:\n            response = _context5.sent;\n\n            if (response.ok) {\n              _context5.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: CART_FAILURE\n            });\n            throw new Error(\"Something went wrong!\");\n\n          case 9:\n            dispatch({\n              type: \"RESET_CART\"\n            });\n            _context5.next = 15;\n            break;\n\n          case 12:\n            _context5.prev = 12;\n            _context5.t0 = _context5[\"catch\"](2);\n            throw _context5.t0;\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/reducers/cart/cartActions.js"],"names":["API_URL","timeoutPromise","CART_LOADING","CART_FAILURE","FETCH_CART","ADD_CART","RESET_CART","REMOVE_FROM_CART","DES_CART_QUANTITY","fetchCart","dispatch","getState","user","auth","emptyCart","items","userid","undefined","type","fetch","headers","Accept","token","method","response","ok","Error","json","resData","filterUserCart","content","filter","userCart","userId","carts","length","addToCart","item","body","JSON","stringify","_id","quantity","cartItem","removeFromCart","cartId","itemId","decCartQuantity","cartItemId","resetCart"],"mappings":"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","sourcesContent":["import { API_URL } from \"../../utils/Config\";\r\nimport { timeoutPromise } from \"../../utils/Tools\";\r\nexport const CART_LOADING = \"CART_LOADING\";\r\nexport const CART_FAILURE = \"CART_FAILURE\";\r\nexport const FETCH_CART = \"FETCH_CART\";\r\nexport const ADD_CART = \"ADD_CART\";\r\nexport const RESET_CART = \"RESET_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const DES_CART_QUANTITY = \"DES_CART_QUANTITY\";\r\n\r\n//Fetch Cart\r\nexport const fetchCart = () => {\r\n  return async (dispatch, getState) => {\r\n    const user = getState().auth.user;\r\n    const emptyCart = {\r\n      items: [],\r\n    };\r\n    if (user.userid != undefined) {\r\n      dispatch({\r\n        type: CART_LOADING,\r\n      });\r\n      try {\r\n        const response = await timeoutPromise(\r\n          fetch(`${API_URL}/cart`, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n              \"auth-token\": user.token,\r\n            },\r\n            method: \"GET\",\r\n          })\r\n        );\r\n        if (!response.ok) {\r\n          dispatch({\r\n            type: CART_FAILURE,\r\n          });\r\n          throw new Error(\"Something went wrong!, can't get your carts\");\r\n        }\r\n        const resData = await response.json();\r\n        const filterUserCart = resData.content.filter(\r\n          (userCart) => userCart.userId === user.userid\r\n        );\r\n        let carts = emptyCart;\r\n        if (filterUserCart.length > 0) {\r\n          carts = filterUserCart[0];\r\n        }\r\n        dispatch({\r\n          type: FETCH_CART,\r\n          carts,\r\n        });\r\n      } catch (err) {\r\n        throw err;\r\n      }\r\n    }\r\n    return;\r\n  };\r\n};\r\n//Add Add to Cart\r\nexport const addToCart = (item) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CART_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/cart/post`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            userId: user.userid,\r\n            items: [\r\n              {\r\n                item: item._id,\r\n                quantity: 1,\r\n              },\r\n            ],\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: CART_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      dispatch({\r\n        type: \"ADD_CART\",\r\n        cartItem: item,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\n//Remove from Cart\r\nexport const removeFromCart = (cartId, itemId) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CART_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/cart/cartitem/${cartId}`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"DELETE\",\r\n          body: JSON.stringify({\r\n            item: itemId,\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: CART_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      dispatch({\r\n        type: \"REMOVE_FROM_CART\",\r\n        itemId,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n//Decrease cart quantity\r\nexport const decCartQuantity = (cartId, itemId) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CART_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/cart/cartitem/${cartId}`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            item: itemId,\r\n            quantity: \"decrease\",\r\n          }),\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: CART_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      dispatch({\r\n        type: \"DES_CART_QUANTITY\",\r\n        cartItemId: itemId,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\n//Reset Cart\r\nexport const resetCart = (cartId) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: CART_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/cart/${cartId}`, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": user.token,\r\n          },\r\n          method: \"DELETE\",\r\n        })\r\n      );\r\n      if (!response.ok) {\r\n        dispatch({\r\n          type: CART_FAILURE,\r\n        });\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      dispatch({\r\n        type: \"RESET_CART\",\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}