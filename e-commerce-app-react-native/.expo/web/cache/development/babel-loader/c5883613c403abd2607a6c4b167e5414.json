{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { API_URL } from \"../../utils/Config\";\nimport { timeoutPromise } from \"../../utils/Tools\";\nexport var AUTH_LOADING = 'AUTH_LOADING';\nexport var SIGN_UP = 'SIGN_UP';\nexport var LOGIN = 'LOGIN';\nexport var AUTH_FAILURE = 'AUTH_FAILURE';\nexport var AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport var LOGOUT = 'LOGOUT';\nexport var EDIT_INFO = 'EDIT_INFO ';\nexport var UPLOAD_PROFILEPIC = 'UPLOAD_PROFILEPIC';\nexport var FORGET_PASSWORD = 'FORGET_PASSWORD';\nexport var RESET_PASSWORD = 'RESET_PASSWORD';\nexport var RESET_ERROR = 'RESET_ERROR';\nimport AskingExpoToken from \"../../components/Notification/AskingNotiPermission\";\n\nvar saveDataToStorage = function saveDataToStorage(name, data) {\n  AsyncStorage.setItem(name, JSON.stringify({\n    data: data\n  }));\n};\n\nexport var SignUp = function SignUp(name, email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: AUTH_LOADING\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/register\", {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              method: 'POST',\n              body: JSON.stringify({\n                name: name,\n                email: email,\n                password: password\n              })\n            })));\n\n          case 4:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            errorResData = _context.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            throw new Error(errorResData.err);\n\n          case 11:\n            dispatch({\n              type: SIGN_UP\n            });\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  };\n};\nexport var Login = function Login(email, password) {\n  return function _callee2(dispatch) {\n    var pushToken, response, errorResData, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: AUTH_LOADING\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AskingExpoToken());\n\n          case 3:\n            pushToken = _context2.sent;\n            _context2.prev = 4;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/login\", {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              method: 'POST',\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                pushTokens: [pushToken]\n              })\n            })));\n\n          case 7:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            errorResData = _context2.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            throw new Error(errorResData.err);\n\n          case 14:\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 16:\n            resData = _context2.sent;\n            saveDataToStorage('user', resData);\n            dispatch(setLogoutTimer(60 * 60 * 1000));\n            dispatch({\n              type: LOGIN,\n              user: resData\n            });\n            _context2.next = 25;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](4);\n            throw _context2.t0;\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 22]], Promise);\n  };\n};\nexport var EditInfo = function EditInfo(phone, address) {\n  return function _callee3(dispatch, getState) {\n    var user, response, errorResData;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            user = getState().auth.user;\n            dispatch({\n              type: AUTH_LOADING\n            });\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/\" + user.userid, {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'auth-token': user.token\n              },\n              method: 'PATCH',\n              body: JSON.stringify({\n                phone: phone,\n                address: address\n              })\n            })));\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            errorResData = _context3.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            Error(errorResData.err);\n\n          case 12:\n            dispatch({\n              type: EDIT_INFO,\n              phone: phone,\n              address: address\n            });\n            _context3.next = 18;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](2);\n            throw _context3.t0;\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 15]], Promise);\n  };\n};\nexport var UploadProfilePic = function UploadProfilePic(imageUri, filename, type) {\n  return function _callee4(dispatch, getState) {\n    var user, formData, response, errorResData;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch({\n              type: AUTH_LOADING\n            });\n            user = getState().auth.user;\n            formData = new FormData();\n            formData.append('profilePic', {\n              uri: imageUri,\n              name: filename,\n              type: type\n            });\n            _context4.prev = 4;\n            _context4.next = 7;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/photo/\" + user.userid, {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'multipart/form-data',\n                'auth-token': user.token\n              },\n              method: 'PATCH',\n              body: formData\n            })));\n\n          case 7:\n            response = _context4.sent;\n\n            if (response.ok) {\n              _context4.next = 14;\n              break;\n            }\n\n            _context4.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            errorResData = _context4.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            throw new Error(errorResData.err);\n\n          case 14:\n            dispatch({\n              type: UPLOAD_PROFILEPIC,\n              profilePic: imageUri\n            });\n            _context4.next = 20;\n            break;\n\n          case 17:\n            _context4.prev = 17;\n            _context4.t0 = _context4[\"catch\"](4);\n            throw _context4.t0;\n\n          case 20:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[4, 17]], Promise);\n  };\n};\nexport var ForgetPassword = function ForgetPassword(email) {\n  return function _callee5(dispatch) {\n    var response, errorResData;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch({\n              type: AUTH_LOADING\n            });\n            _context5.prev = 1;\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/reset_pw\", {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              method: 'POST',\n              body: JSON.stringify({\n                email: email\n              })\n            })));\n\n          case 4:\n            response = _context5.sent;\n\n            if (response.ok) {\n              _context5.next = 11;\n              break;\n            }\n\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            errorResData = _context5.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            throw new Error(errorResData.err);\n\n          case 11:\n            dispatch({\n              type: FORGET_PASSWORD\n            });\n            _context5.next = 17;\n            break;\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](1);\n            throw _context5.t0;\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  };\n};\nexport var ResetPassword = function ResetPassword(password, url) {\n  return function _callee6(dispatch) {\n    var response, errorResData;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            dispatch({\n              type: AUTH_LOADING\n            });\n            _context6.prev = 1;\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(timeoutPromise(fetch(API_URL + \"/user/receive_new_password/\" + url.userid + \"/\" + url.token, {\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              method: 'POST',\n              body: JSON.stringify({\n                password: password\n              })\n            })));\n\n          case 4:\n            response = _context6.sent;\n\n            if (response.ok) {\n              _context6.next = 11;\n              break;\n            }\n\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            errorResData = _context6.sent;\n            dispatch({\n              type: AUTH_FAILURE\n            });\n            throw new Error(errorResData.err);\n\n          case 11:\n            dispatch({\n              type: RESET_PASSWORD\n            });\n            _context6.next = 17;\n            break;\n\n          case 14:\n            _context6.prev = 14;\n            _context6.t0 = _context6[\"catch\"](1);\n            throw _context6.t0;\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  };\n};\nexport var Logout = function Logout() {\n  return function (dispatch) {\n    clearLogoutTimer();\n    AsyncStorage.removeItem('user');\n    dispatch({\n      type: LOGOUT,\n      user: {}\n    });\n  };\n};\nvar timer;\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(dispatch(Logout()));\n\n            case 2:\n              alert('Logout section expired');\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, expirationTime);\n  };\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/reducers/auth/authActions.js"],"names":["AsyncStorage","API_URL","timeoutPromise","AUTH_LOADING","SIGN_UP","LOGIN","AUTH_FAILURE","AUTH_SUCCESS","LOGOUT","EDIT_INFO","UPLOAD_PROFILEPIC","FORGET_PASSWORD","RESET_PASSWORD","RESET_ERROR","AskingExpoToken","saveDataToStorage","name","data","setItem","JSON","stringify","SignUp","email","password","dispatch","type","fetch","headers","Accept","method","body","response","ok","json","errorResData","Error","err","Login","pushToken","pushTokens","resData","setLogoutTimer","user","EditInfo","phone","address","getState","auth","userid","token","UploadProfilePic","imageUri","filename","formData","FormData","append","uri","profilePic","ForgetPassword","ResetPassword","url","Logout","clearLogoutTimer","removeItem","timer","clearTimeout","expirationTime","setTimeout","alert"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\r\nimport { API_URL } from '../../utils/Config';\r\nimport { timeoutPromise } from '../../utils/Tools';\r\n\r\nexport const AUTH_LOADING = 'AUTH_LOADING';\r\nexport const SIGN_UP = 'SIGN_UP';\r\nexport const LOGIN = 'LOGIN';\r\nexport const AUTH_FAILURE = 'AUTH_FAILURE';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const EDIT_INFO = 'EDIT_INFO ';\r\nexport const UPLOAD_PROFILEPIC = 'UPLOAD_PROFILEPIC';\r\nexport const FORGET_PASSWORD = 'FORGET_PASSWORD';\r\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\r\nexport const RESET_ERROR = 'RESET_ERROR';\r\n\r\nimport AskingExpoToken from '../../components/Notification/AskingNotiPermission';\r\n\r\n//Create dataStorage\r\nconst saveDataToStorage = (name, data) => {\r\n  AsyncStorage.setItem(\r\n    name,\r\n    JSON.stringify({\r\n      data,\r\n    }),\r\n  );\r\n};\r\n\r\nexport const SignUp = (name, email, password) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/user/register`, {\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            name,\r\n            email,\r\n            password,\r\n          }),\r\n        }),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        throw new Error(errorResData.err);\r\n      }\r\n      dispatch({\r\n        type: SIGN_UP,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\n//Login\r\nexport const Login = (email, password) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    const pushToken = await AskingExpoToken();\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/user/login`, {\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n            pushTokens: [pushToken],\r\n          }),\r\n        }),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        throw new Error(errorResData.err);\r\n      }\r\n      const resData = await response.json();\r\n      saveDataToStorage('user', resData);\r\n      dispatch(setLogoutTimer(60 * 60 * 1000));\r\n      dispatch({\r\n        type: LOGIN,\r\n        user: resData,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\nexport const EditInfo = (phone, address) => {\r\n  return async (dispatch, getState) => {\r\n    const user = getState().auth.user;\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/user/${user.userid}`, {\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'auth-token': user.token,\r\n          },\r\n          method: 'PATCH',\r\n          body: JSON.stringify({\r\n            phone,\r\n            address,\r\n          }),\r\n        }),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        Error(errorResData.err);\r\n      }\r\n\r\n      dispatch({\r\n        type: EDIT_INFO,\r\n        phone,\r\n        address,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\nexport const UploadProfilePic = (imageUri, filename, type) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    const user = getState().auth.user;\r\n    let formData = new FormData();\r\n    // Infer the type of the image\r\n    formData.append('profilePic', {\r\n      uri: imageUri,\r\n      name: filename,\r\n      type,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/user/photo/${user.userid}`, {\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'multipart/form-data',\r\n            'auth-token': user.token,\r\n          },\r\n          method: 'PATCH',\r\n          body: formData,\r\n        }),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        throw new Error(errorResData.err);\r\n      }\r\n\r\n      dispatch({\r\n        type: UPLOAD_PROFILEPIC,\r\n        profilePic: imageUri,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\nexport const ForgetPassword = (email) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(`${API_URL}/user/reset_pw`, {\r\n          headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            email,\r\n          }),\r\n        }),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        throw new Error(errorResData.err);\r\n      }\r\n      dispatch({\r\n        type: FORGET_PASSWORD,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\nexport const ResetPassword = (password, url) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: AUTH_LOADING,\r\n    });\r\n    try {\r\n      const response = await timeoutPromise(\r\n        fetch(\r\n          `${API_URL}/user/receive_new_password/${url.userid}/${url.token}`,\r\n          {\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              password,\r\n            }),\r\n          },\r\n        ),\r\n      );\r\n      if (!response.ok) {\r\n        const errorResData = await response.json();\r\n        dispatch({\r\n          type: AUTH_FAILURE,\r\n        });\r\n        throw new Error(errorResData.err);\r\n      }\r\n      dispatch({\r\n        type: RESET_PASSWORD,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\n//Logout\r\nexport const Logout = () => {\r\n  return (dispatch) => {\r\n    clearLogoutTimer(); //clear setTimeout when logout\r\n    AsyncStorage.removeItem('user');\r\n    dispatch({\r\n      type: LOGOUT,\r\n      user: {},\r\n    });\r\n  };\r\n};\r\n\r\n//Auto log out\r\nlet timer;\r\nconst clearLogoutTimer = () => {\r\n  if (timer) {\r\n    clearTimeout(timer);\r\n  }\r\n};\r\nconst setLogoutTimer = (expirationTime) => {\r\n  return (dispatch) => {\r\n    timer = setTimeout(async () => {\r\n      await dispatch(Logout());\r\n      alert('Logout section expired');\r\n    }, expirationTime);\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}