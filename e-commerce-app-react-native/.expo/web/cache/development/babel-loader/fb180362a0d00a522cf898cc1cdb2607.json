{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\2020-2021\\\\II\\\\aws\\\\project\\\\TechComeReact\\\\e-commerce-app-react-native\\\\src\\\\navigation\\\\AppNavigator.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { useSelector } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef } from \"./RootNavigation\";\nimport { DrawerNavigator, IntroStackScreen } from \"./StoneNavigator\";\nimport { useDispatch } from 'react-redux';\nimport { Logout } from \"../reducers\";\nimport { Host } from 'react-native-portalize';\nimport { urlRedirect } from \"../utils/Tools\";\nimport * as Linking from 'expo-linking';\nYellowBox.ignoreWarnings(['Setting a timer']);\nexport var AppNavigator = function AppNavigator() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var dispatch = useDispatch();\n  var isFirstOpen = useSelector(function (state) {\n    return state.store.isFirstOpen;\n  });\n  useEffect(function () {\n    Linking.addEventListener('url', function (event) {\n      urlRedirect(event.url);\n    }, [urlRedirect]);\n    Linking.getInitialURL().then(urlRedirect);\n    Linking.removeEventListener('url', function (event) {\n      urlRedirect(event.url);\n    }, [urlRedirect]);\n  }, [urlRedirect]);\n  useEffect(function () {\n    var isFirstTime = function isFirstTime() {\n      var firstOpen;\n      return _regeneratorRuntime.async(function isFirstTime$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('isFirstTime'));\n\n            case 2:\n              firstOpen = _context.sent;\n              setValue(firstOpen);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    isFirstTime();\n\n    var autoLogout = function autoLogout() {\n      var getUser, user;\n      return _regeneratorRuntime.async(function autoLogout$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n            case 2:\n              getUser = _context2.sent;\n\n              if (!getUser) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(JSON.parse(getUser));\n\n            case 6:\n              user = _context2.sent;\n\n              if (user.data.expireTime - Date.now() < 0) {\n                dispatch(Logout());\n              }\n\n            case 8:\n              return _context2.abrupt(\"return\");\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    autoLogout();\n  }, []);\n  useEffect(function () {\n    var autoLogout = function autoLogout() {\n      var getUser, user;\n      return _regeneratorRuntime.async(function autoLogout$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n            case 2:\n              getUser = _context3.sent;\n\n              if (!getUser) {\n                _context3.next = 8;\n                break;\n              }\n\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(JSON.parse(getUser));\n\n            case 6:\n              user = _context3.sent;\n\n              if (user.data.expireTime - Date.now() < 0) {\n                dispatch(Logout());\n              }\n\n            case 8:\n              return _context3.abrupt(\"return\");\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    autoLogout();\n  }, []);\n  return React.createElement(NavigationContainer, {\n    ref: navigationRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(Host, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, (isFirstOpen || value !== null) && React.createElement(DrawerNavigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 45\n    }\n  }), !isFirstOpen && value === null && React.createElement(IntroStackScreen, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 44\n    }\n  })));\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/navigation/AppNavigator.js"],"names":["React","useEffect","useState","AsyncStorage","useSelector","NavigationContainer","navigationRef","DrawerNavigator","IntroStackScreen","useDispatch","Logout","Host","urlRedirect","Linking","YellowBox","ignoreWarnings","AppNavigator","value","setValue","dispatch","isFirstOpen","state","store","addEventListener","event","url","getInitialURL","then","removeEventListener","isFirstTime","getItem","firstOpen","autoLogout","getUser","JSON","parse","user","data","expireTime","Date","now"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { AsyncStorage, YellowBox } from 'react-native';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { navigationRef } from './RootNavigation';\r\nimport { DrawerNavigator, IntroStackScreen } from './StoneNavigator';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Logout } from '../reducers';\r\n//Modalize\r\nimport { Host } from 'react-native-portalize';\r\n//Deep Link\r\nimport { urlRedirect } from '../utils/Tools';\r\nimport * as Linking from 'expo-linking';\r\n\r\nYellowBox.ignoreWarnings(['Setting a timer']);\r\n\r\nexport const AppNavigator = () => {\r\n  const [value, setValue] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const isFirstOpen = useSelector((state) => state.store.isFirstOpen);\r\n  useEffect(() => {\r\n    // listen for new url events coming from Expo\r\n    Linking.addEventListener(\r\n      'url',\r\n      (event) => {\r\n        urlRedirect(event.url);\r\n      },\r\n      [urlRedirect],\r\n    );\r\n    Linking.getInitialURL().then(urlRedirect);\r\n    Linking.removeEventListener(\r\n      'url',\r\n      (event) => {\r\n        urlRedirect(event.url);\r\n      },\r\n      [urlRedirect],\r\n    );\r\n  }, [urlRedirect]);\r\n\r\n  useEffect(() => {\r\n    const isFirstTime = async () => {\r\n      const firstOpen = await AsyncStorage.getItem('isFirstTime');\r\n      setValue(firstOpen);\r\n    };\r\n    isFirstTime();\r\n    const autoLogout = async () => {\r\n      const getUser = await AsyncStorage.getItem('user');\r\n      if (getUser) {\r\n        const user = await JSON.parse(getUser);\r\n        if (user.data.expireTime - Date.now() < 0) {\r\n          dispatch(Logout());\r\n        }\r\n      }\r\n      return;\r\n    };\r\n    autoLogout();\r\n  }, []);\r\n  useEffect(() => {\r\n    const autoLogout = async () => {\r\n      const getUser = await AsyncStorage.getItem('user');\r\n      if (getUser) {\r\n        const user = await JSON.parse(getUser);\r\n        if (user.data.expireTime - Date.now() < 0) {\r\n          dispatch(Logout());\r\n        }\r\n      }\r\n      return;\r\n    };\r\n    autoLogout();\r\n  }, []);\r\n  return (\r\n    <NavigationContainer ref={navigationRef}>\r\n      <Host>\r\n        {/* <IntroStackScreen /> */}\r\n        {(isFirstOpen || value !== null) && <DrawerNavigator />}\r\n        {!isFirstOpen && value === null && <IntroStackScreen />}\r\n      </Host>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}