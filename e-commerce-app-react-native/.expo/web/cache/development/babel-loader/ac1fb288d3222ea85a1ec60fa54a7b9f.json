{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\2020-2021\\\\II\\\\aws\\\\project\\\\TechComeReact\\\\e-commerce-app-react-native\\\\src\\\\utils\\\\Tools.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback } from \"react\";\nimport * as RootNavigation from \"../navigation/RootNavigation\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as Linking from \"expo-linking\";\nimport Colors from \"./Colors\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport Constants from \"expo-constants\";\nimport { STRIPE_PUBLISHABLE_KEY, API_URL } from \"./Config\";\nexport var OpenURL = function OpenURL(_ref) {\n  var url = _ref.url,\n      children = _ref.children;\n  var handlePress = useCallback(function _callee() {\n    var supported;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n          case 2:\n            supported = _context.sent;\n\n            if (!supported) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Linking.openURL(url));\n\n          case 6:\n            _context.next = 9;\n            break;\n\n          case 8:\n            Alert.alert(\"Don't know how to open this URL: \" + url);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [url]);\n  return React.createElement(TouchableOpacity, {\n    onPress: handlePress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport var urlRedirect = function urlRedirect(url) {\n  if (!url) return;\n\n  var _Linking$parse = Linking.parse(url),\n      path = _Linking$parse.path,\n      queryParams = _Linking$parse.queryParams;\n\n  if (path) {\n    RootNavigation.navigate(path, queryParams);\n  }\n\n  return;\n};\nexport var timeoutPromise = function timeoutPromise(url) {\n  return new Promise(function (resolve, reject) {\n    var timeoutId = setTimeout(function () {\n      reject(new Error(\"Timeout, Server is not responding\"));\n    }, 20 * 1000);\n    url.then(function (res) {\n      clearTimeout(timeoutId);\n      resolve(res);\n    }, function (err) {\n      clearTimeout(timeoutId);\n      reject(err);\n    });\n  });\n};\nexport var _pickImage = function _pickImage(action) {\n  var _await$Permissions$as, status, type, result;\n\n  return _regeneratorRuntime.async(function _pickImage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          if (!Constants.platform.ios) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL, Permissions.CAMERA));\n\n        case 4:\n          _await$Permissions$as = _context2.sent;\n          status = _await$Permissions$as.status;\n\n          if (!(status !== \"granted\")) {\n            _context2.next = 8;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", alert(\"Sorry, we need camera roll permissions to make this work!\"));\n\n        case 8:\n          type = action === \"library\" ? ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 4],\n            quality: 1\n          }) : ImagePicker.launchCameraAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 4],\n            quality: 1\n          });\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(type);\n\n        case 11:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result);\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 15]], Promise);\n};\nexport var colorCheck = function colorCheck(colorCode) {\n  switch (colorCode) {\n    case \"yellow\":\n      return Colors.yellow;\n\n    case \"green\":\n      return Colors.green;\n\n    case \"purple\":\n      return Colors.purple;\n\n    case \"blue\":\n      return Colors.water;\n\n    case \"pink\":\n      return Colors.straw;\n\n    default:\n      return Colors.lighter_green;\n  }\n};\nexport var getCreditCardToken = function getCreditCardToken(creditCardData) {\n  var card = {\n    \"card[number]\": creditCardData.values.number.replace(/ /g, \"\"),\n    \"card[exp_month]\": creditCardData.values.expiry.split(\"/\")[0],\n    \"card[exp_year]\": creditCardData.values.expiry.split(\"/\")[1],\n    \"card[cvc]\": creditCardData.values.cvc\n  };\n  return fetch(\"https://api.stripe.com/v1/tokens\", {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: \"Bearer \" + STRIPE_PUBLISHABLE_KEY\n    },\n    method: \"post\",\n    body: Object.keys(card).map(function (key) {\n      return key + \"=\" + card[key];\n    }).join(\"&\")\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return console.log(error);\n  });\n};","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/src/utils/Tools.js"],"names":["React","useCallback","RootNavigation","Linking","Colors","ImagePicker","Permissions","Constants","STRIPE_PUBLISHABLE_KEY","API_URL","OpenURL","url","children","handlePress","canOpenURL","supported","openURL","Alert","alert","urlRedirect","parse","path","queryParams","navigate","timeoutPromise","Promise","resolve","reject","timeoutId","setTimeout","Error","then","res","clearTimeout","err","_pickImage","action","platform","ios","askAsync","CAMERA_ROLL","CAMERA","status","type","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","launchCameraAsync","result","console","log","colorCheck","colorCode","yellow","green","purple","water","straw","lighter_green","getCreditCardToken","creditCardData","card","values","number","replace","expiry","split","cvc","fetch","headers","Accept","Authorization","method","body","Object","keys","map","key","join","response","json","catch","error"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport * as RootNavigation from \"../navigation/RootNavigation\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport * as Linking from \"expo-linking\";\r\nimport Colors from \"./Colors\";\r\n//Upload Image\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport * as Permissions from \"expo-permissions\";\r\nimport Constants from \"expo-constants\";\r\nimport { STRIPE_PUBLISHABLE_KEY, API_URL } from \"./Config\";\r\n\r\nexport const OpenURL = ({ url, children }) => {\r\n  const handlePress = useCallback(async () => {\r\n    // Checking if the link is supported for links with custom URL scheme.\r\n    const supported = await Linking.canOpenURL(url);\r\n\r\n    if (supported) {\r\n      // Opening the link with some app, if the URL scheme is \"http\" the web link should be opened\r\n      // by some browser in the mobile\r\n      await Linking.openURL(url);\r\n    } else {\r\n      Alert.alert(`Don't know how to open this URL: ${url}`);\r\n    }\r\n  }, [url]);\r\n  return <TouchableOpacity onPress={handlePress}>{children}</TouchableOpacity>;\r\n};\r\n\r\n//Handle Deep Link\r\nexport const urlRedirect = (url) => {\r\n  if (!url) return;\r\n  // parse and redirect to new url\r\n  let { path, queryParams } = Linking.parse(url);\r\n  // console.log(\r\n  //   `Linked to app with path: ${path} and data: ${JSON.stringify(\r\n  //     queryParams\r\n  //   )}`\r\n  // );\r\n  if (path) {\r\n    RootNavigation.navigate(path, queryParams);\r\n  }\r\n  return;\r\n};\r\n\r\n//Handle Fetching timeout\r\nexport const timeoutPromise = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    const timeoutId = setTimeout(() => {\r\n      reject(new Error(\"Timeout, Server is not responding\"));\r\n    }, 20 * 1000);\r\n    url.then(\r\n      (res) => {\r\n        clearTimeout(timeoutId);\r\n        resolve(res);\r\n      },\r\n      (err) => {\r\n        clearTimeout(timeoutId);\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\nexport const _pickImage = async (action) => {\r\n  try {\r\n    if (Constants.platform.ios) {\r\n      const { status } = await Permissions.askAsync(\r\n        Permissions.CAMERA_ROLL,\r\n        Permissions.CAMERA\r\n      );\r\n      if (status !== \"granted\") {\r\n        return alert(\r\n          \"Sorry, we need camera roll permissions to make this work!\"\r\n        );\r\n      }\r\n    }\r\n    const type =\r\n      action === \"library\"\r\n        ? ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n            allowsEditing: true,\r\n            aspect: [4, 4],\r\n            quality: 1,\r\n          })\r\n        : ImagePicker.launchCameraAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n            allowsEditing: true,\r\n            aspect: [4, 4],\r\n            quality: 1,\r\n          });\r\n\r\n    let result = await type;\r\n    return result;\r\n  } catch (E) {\r\n    console.log(E);\r\n  }\r\n};\r\n\r\nexport const colorCheck = (colorCode) => {\r\n  switch (colorCode) {\r\n    case \"yellow\":\r\n      return Colors.yellow;\r\n    case \"green\":\r\n      return Colors.green;\r\n    case \"purple\":\r\n      return Colors.purple;\r\n    case \"blue\":\r\n      return Colors.water;\r\n    case \"pink\":\r\n      return Colors.straw;\r\n    default:\r\n      return Colors.lighter_green;\r\n  }\r\n};\r\n\r\n//Get token from Stripe Server\r\n\r\nexport const getCreditCardToken = (creditCardData) => {\r\n  const card = {\r\n    \"card[number]\": creditCardData.values.number.replace(/ /g, \"\"),\r\n    \"card[exp_month]\": creditCardData.values.expiry.split(\"/\")[0],\r\n    \"card[exp_year]\": creditCardData.values.expiry.split(\"/\")[1],\r\n    \"card[cvc]\": creditCardData.values.cvc,\r\n  };\r\n  return fetch(\"https://api.stripe.com/v1/tokens\", {\r\n    headers: {\r\n      // Use the correct MIME type for your server\r\n      Accept: \"application/json\",\r\n      // Use the correct Content Type to send data to Stripe\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      // Use the Stripe publishable key as Bearer\r\n      Authorization: `Bearer ${STRIPE_PUBLISHABLE_KEY}`,\r\n    },\r\n    // Use a proper HTTP method\r\n    method: \"post\",\r\n    // Format the credit card data to a string of key-value pairs\r\n    // divided by &\r\n    body: Object.keys(card)\r\n      .map((key) => key + \"=\" + card[key])\r\n      .join(\"&\"),\r\n  })\r\n    .then((response) => response.json())\r\n    .catch((error) => console.log(error));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}