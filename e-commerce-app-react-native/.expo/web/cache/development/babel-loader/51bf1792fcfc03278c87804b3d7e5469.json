{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\2020-2021\\\\II\\\\aws\\\\project\\\\TechComeReact\\\\e-commerce-app-react-native\\\\node_modules\\\\react-native-input-credit-card\\\\src\\\\CreditCardInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport CreditCard from \"./CardView/CardView\";\nimport CCInput from \"./CCInput\";\nimport { InjectedProps } from \"./connectToState\";\nvar s = StyleSheet.create({\n  container: {\n    alignItems: \"center\"\n  },\n  form: {\n    marginHorizontal: 20,\n    marginVertical: 20\n  },\n  inputContainer: {\n    marginLeft: 20,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  inputLabel: {\n    fontWeight: \"bold\"\n  },\n  input: {\n    height: 40\n  }\n});\nvar CVC_INPUT_WIDTH = 70;\nvar EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;\nvar CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;\nvar CARD_NUMBER_INPUT_WIDTH = Dimensions.get(\"window\").width * 0.5;\nvar NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;\nvar PREVIOUS_FIELD_OFFSET = 40;\nvar POSTAL_CODE_INPUT_WIDTH = 120;\n\nvar CreditCardInput = function (_Component) {\n  _inherits(CreditCardInput, _Component);\n\n  var _super = _createSuper(CreditCardInput);\n\n  function CreditCardInput() {\n    var _this;\n\n    _classCallCheck(this, CreditCardInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.componentDidMount = function () {\n      return _this._focus(_this.props.focused);\n    };\n\n    _this._focus = function (field) {\n      if (!field) return;\n\n      var scrollResponder = _this.refs.Form.getScrollResponder();\n\n      var nodeHandle = findNodeHandle(_this.refs[field]);\n      NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle, function (e) {\n        throw e;\n      }, function (x) {\n        scrollResponder.scrollTo({\n          x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0),\n          animated: true\n        });\n\n        _this.refs[field].focus();\n      });\n    };\n\n    _this._inputProps = function (field) {\n      var _this$props = _this.props,\n          inputStyle = _this$props.inputStyle,\n          labelStyle = _this$props.labelStyle,\n          validColor = _this$props.validColor,\n          invalidColor = _this$props.invalidColor,\n          placeholderColor = _this$props.placeholderColor,\n          placeholders = _this$props.placeholders,\n          labels = _this$props.labels,\n          values = _this$props.values,\n          status = _this$props.status,\n          onFocus = _this$props.onFocus,\n          onChange = _this$props.onChange,\n          onBecomeEmpty = _this$props.onBecomeEmpty,\n          onBecomeValid = _this$props.onBecomeValid,\n          additionalInputsProps = _this$props.additionalInputsProps;\n      return {\n        inputStyle: [s.input, inputStyle],\n        labelStyle: [s.inputLabel, labelStyle],\n        validColor: validColor,\n        invalidColor: invalidColor,\n        placeholderColor: placeholderColor,\n        ref: field,\n        field: field,\n        label: labels[field],\n        placeholder: placeholders[field],\n        value: values[field],\n        status: status[field],\n        onFocus: onFocus,\n        onChange: onChange,\n        onBecomeEmpty: onBecomeEmpty,\n        onBecomeValid: onBecomeValid,\n        additionalInputProps: additionalInputsProps[field]\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(CreditCardInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.focused !== this.props.focused) this._focus(this.props.focused);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          cardImageFront = _this$props2.cardImageFront,\n          cardImageBack = _this$props2.cardImageBack,\n          inputContainerStyle = _this$props2.inputContainerStyle,\n          _this$props2$values = _this$props2.values,\n          number = _this$props2$values.number,\n          expiry = _this$props2$values.expiry,\n          cvc = _this$props2$values.cvc,\n          name = _this$props2$values.name,\n          type = _this$props2$values.type,\n          focused = _this$props2.focused,\n          placeholderCardView = _this$props2.placeholderCardView,\n          allowScroll = _this$props2.allowScroll,\n          requiresName = _this$props2.requiresName,\n          requiresCVC = _this$props2.requiresCVC,\n          requiresPostalCode = _this$props2.requiresPostalCode,\n          cardScale = _this$props2.cardScale,\n          cardFontFamily = _this$props2.cardFontFamily,\n          cardBrandIcons = _this$props2.cardBrandIcons,\n          scrollViewProps = _this$props2.scrollViewProps;\n      return React.createElement(View, {\n        style: s.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }\n      }, React.createElement(CreditCard, {\n        focused: focused,\n        brand: type,\n        scale: cardScale,\n        fontFamily: cardFontFamily,\n        imageFront: cardImageFront,\n        imageBack: cardImageBack,\n        customIcons: cardBrandIcons,\n        placeholder: placeholderCardView,\n        name: requiresName ? name : \" \",\n        number: number,\n        expiry: expiry,\n        cvc: cvc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }), React.createElement(ScrollView, _extends({\n        ref: \"Form\",\n        horizontal: true,\n        keyboardShouldPersistTaps: \"always\",\n        scrollEnabled: allowScroll,\n        showsHorizontalScrollIndicator: false,\n        style: s.form\n      }, scrollViewProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }), requiresName && React.createElement(CCInput, _extends({}, this._inputProps(\"name\"), {\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: NAME_INPUT_WIDTH\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      })), React.createElement(CCInput, _extends({}, this._inputProps(\"number\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: CARD_NUMBER_INPUT_WIDTH\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }\n      })), React.createElement(CCInput, _extends({}, this._inputProps(\"expiry\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      })), requiresCVC && React.createElement(CCInput, _extends({}, this._inputProps(\"cvc\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: CVC_INPUT_WIDTH\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      })), requiresPostalCode && React.createElement(CCInput, _extends({}, this._inputProps(\"postalCode\"), {\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: POSTAL_CODE_INPUT_WIDTH\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return CreditCardInput;\n}(Component);\n\nCreditCardInput.propTypes = _objectSpread(_objectSpread({}, InjectedProps), {}, {\n  labels: PropTypes.object,\n  placeholders: PropTypes.object,\n  labelStyle: Text.propTypes.style,\n  inputStyle: TextInput.propTypes.style,\n  inputContainerStyle: ViewPropTypes.style,\n  validColor: PropTypes.string,\n  invalidColor: PropTypes.string,\n  placeholderColor: PropTypes.string,\n  cardImageFront: PropTypes.number,\n  cardImageBack: PropTypes.number,\n  cardScale: PropTypes.number,\n  cardFontFamily: PropTypes.string,\n  cardBrandIcons: PropTypes.object,\n  allowScroll: PropTypes.bool,\n  additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes)),\n  scrollViewProps: PropTypes.object\n});\nCreditCardInput.defaultProps = {\n  cardViewSize: {},\n  labels: {\n    name: \"NAME\",\n    number: \"CARD NUMBER\",\n    expiry: \"EXPIRY\",\n    cvc: \"CVC/CCV\",\n    postalCode: \"POSTAL CODE\"\n  },\n  placeholders: {\n    name: \"Full name\",\n    number: \"1234 5678 1234 5678\",\n    expiry: \"MM/YY\",\n    cvc: \"CVC\",\n    postalCode: \"34567\"\n  },\n  inputContainerStyle: {\n    borderBottomWidth: 1,\n    borderBottomColor: \"black\"\n  },\n  validColor: \"\",\n  invalidColor: \"red\",\n  placeholderColor: \"gray\",\n  allowScroll: false,\n  additionalInputsProps: {}\n};\nexport { CreditCardInput as default };","map":{"version":3,"sources":["D:/2020-2021/II/aws/project/TechComeReact/e-commerce-app-react-native/node_modules/react-native-input-credit-card/src/CreditCardInput.js"],"names":["React","Component","PropTypes","ViewPropTypes","CreditCard","CCInput","InjectedProps","s","StyleSheet","create","container","alignItems","form","marginHorizontal","marginVertical","inputContainer","marginLeft","marginTop","marginBottom","inputLabel","fontWeight","input","height","CVC_INPUT_WIDTH","EXPIRY_INPUT_WIDTH","CARD_NUMBER_INPUT_WIDTH_OFFSET","CARD_NUMBER_INPUT_WIDTH","Dimensions","get","width","NAME_INPUT_WIDTH","PREVIOUS_FIELD_OFFSET","POSTAL_CODE_INPUT_WIDTH","CreditCardInput","componentDidMount","_focus","props","focused","field","scrollResponder","refs","Form","getScrollResponder","nodeHandle","findNodeHandle","NativeModules","UIManager","measureLayoutRelativeToParent","e","x","scrollTo","Math","max","animated","focus","_inputProps","inputStyle","labelStyle","validColor","invalidColor","placeholderColor","placeholders","labels","values","status","onFocus","onChange","onBecomeEmpty","onBecomeValid","additionalInputsProps","ref","label","placeholder","value","additionalInputProps","prevProps","cardImageFront","cardImageBack","inputContainerStyle","number","expiry","cvc","name","type","placeholderCardView","allowScroll","requiresName","requiresCVC","requiresPostalCode","cardScale","cardFontFamily","cardBrandIcons","scrollViewProps","propTypes","object","Text","style","TextInput","string","bool","objectOf","shape","defaultProps","cardViewSize","postalCode","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  NativeModules,\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  ViewPropTypes,\n  TextInput,\n  findNodeHandle\n} from \"react-native\";\n\nimport CreditCard from \"./CardView/CardView\";\nimport CCInput from \"./CCInput\";\nimport { InjectedProps } from \"./connectToState\";\n\nconst s = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n  },\n  form: {\n    marginHorizontal: 20,\n    marginVertical: 20,\n  },\n  inputContainer: {\n    marginLeft: 20,\n    marginTop: 20,\n    marginBottom: 20,\n  },\n  inputLabel: {\n    fontWeight: \"bold\",\n  },\n  input: {\n    height: 40,\n  },\n});\n\nconst CVC_INPUT_WIDTH = 70;\nconst EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;\nconst CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;\nconst CARD_NUMBER_INPUT_WIDTH = Dimensions.get(\"window\").width * 0.5;\nconst NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;\nconst PREVIOUS_FIELD_OFFSET = 40;\nconst POSTAL_CODE_INPUT_WIDTH = 120;\n\n/* eslint react/prop-types: 0 */ // https://github.com/yannickcr/eslint-plugin-react/issues/106\nexport default class CreditCardInput extends Component {\n  static propTypes = {\n    ...InjectedProps,\n    labels: PropTypes.object,\n    placeholders: PropTypes.object,\n\n    labelStyle: Text.propTypes.style,\n    // inputStyle: Text.propTypes.style,\n    inputStyle: TextInput.propTypes.style,\n    inputContainerStyle: ViewPropTypes.style,\n\n    validColor: PropTypes.string,\n    invalidColor: PropTypes.string,\n    placeholderColor: PropTypes.string,\n\n    cardImageFront: PropTypes.number,\n    cardImageBack: PropTypes.number,\n    cardScale: PropTypes.number,\n    cardFontFamily: PropTypes.string,\n    cardBrandIcons: PropTypes.object,\n\n    allowScroll: PropTypes.bool,\n\n    additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes)),\n\n    scrollViewProps: PropTypes.object,\n  };\n\n  static defaultProps = {\n    cardViewSize: {},\n    labels: {\n      name: \"NAME\",\n      number: \"CARD NUMBER\",\n      expiry: \"EXPIRY\",\n      cvc: \"CVC/CCV\",\n      postalCode: \"POSTAL CODE\",\n    },\n    placeholders: {\n      name: \"Full name\",\n      number: \"1234 5678 1234 5678\",\n      expiry: \"MM/YY\",\n      cvc: \"CVC\",\n      postalCode: \"34567\",\n    },\n    inputContainerStyle: {\n      borderBottomWidth: 1,\n      borderBottomColor: \"black\",\n    },\n    validColor: \"\",\n    invalidColor: \"red\",\n    placeholderColor: \"gray\",\n    allowScroll: false,\n    additionalInputsProps: {},\n  };\n\n  componentDidMount = () => this._focus(this.props.focused);\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.focused !== this.props.focused) this._focus(this.props.focused);\n  }\n\n  _focus = field => {\n    if (!field) return;\n\n    const scrollResponder = this.refs.Form.getScrollResponder();\n    const nodeHandle = findNodeHandle(this.refs[field]);\n\n    NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle,\n      e => { throw e; },\n      x => {\n        scrollResponder.scrollTo({ x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0), animated: true });\n        this.refs[field].focus();\n      });\n  }\n\n  _inputProps = field => {\n    const {\n      inputStyle,\n      labelStyle,\n      validColor,\n      invalidColor,\n      placeholderColor,\n      placeholders,\n      labels,\n      values,\n      status,\n      onFocus,\n      onChange,\n      onBecomeEmpty,\n      onBecomeValid,\n      additionalInputsProps,\n    } = this.props;\n\n    return {\n      inputStyle: [s.input, inputStyle],\n      labelStyle: [s.inputLabel, labelStyle],\n      validColor, invalidColor, placeholderColor,\n      ref: field, field,\n\n      label: labels[field],\n      placeholder: placeholders[field],\n      value: values[field],\n      status: status[field],\n\n      onFocus, onChange, onBecomeEmpty, onBecomeValid,\n\n      additionalInputProps: additionalInputsProps[field],\n    };\n  };\n\n  render() {\n    const {\n      cardImageFront,\n      cardImageBack,\n      inputContainerStyle,\n      values: { number, expiry, cvc, name, type },\n      focused,\n      placeholderCardView,\n      allowScroll,\n      requiresName,\n      requiresCVC,\n      requiresPostalCode,\n      cardScale,\n      cardFontFamily,\n      cardBrandIcons,\n      scrollViewProps,\n    } = this.props;\n\n    return (\n      <View style={s.container}>\n        <CreditCard\n          focused={focused}\n          brand={type}\n          scale={cardScale}\n          fontFamily={cardFontFamily}\n          imageFront={cardImageFront}\n          imageBack={cardImageBack}\n          customIcons={cardBrandIcons}\n          placeholder={placeholderCardView}\n          name={requiresName ? name : \" \"}\n          number={number}\n          expiry={expiry}\n          cvc={cvc}\n        />\n        <ScrollView\n          ref=\"Form\"\n          horizontal\n          keyboardShouldPersistTaps=\"always\"\n          scrollEnabled={allowScroll}\n          showsHorizontalScrollIndicator={false}\n          style={s.form}\n          {...scrollViewProps}\n        >\n          {requiresName && (\n            <CCInput\n              {...this._inputProps(\"name\")}\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: NAME_INPUT_WIDTH }]}\n            />\n          )}\n          <CCInput\n            {...this._inputProps(\"number\")}\n            keyboardType=\"numeric\"\n            containerStyle={[s.inputContainer, inputContainerStyle, { width: CARD_NUMBER_INPUT_WIDTH }]}\n          />\n          <CCInput\n            {...this._inputProps(\"expiry\")}\n            keyboardType=\"numeric\"\n            containerStyle={[s.inputContainer, inputContainerStyle]}\n          />\n          {requiresCVC && (\n            <CCInput\n              {...this._inputProps(\"cvc\")}\n              keyboardType=\"numeric\"\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: CVC_INPUT_WIDTH }]}\n            />\n          )}\n          {requiresPostalCode && (\n            <CCInput\n              {...this._inputProps(\"postalCode\")}\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: POSTAL_CODE_INPUT_WIDTH }]}\n            />\n          )}\n        </ScrollView>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}